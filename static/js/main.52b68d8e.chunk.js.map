{"version":3,"sources":["components/firstComponent.jsx","components/anotherComponent.jsx","components/compComplexLevelThree.jsx","components/fourthComponent.jsx","components/errorBoundary.jsx","components/tryJSONstringify.jsx","components/resizableTextarea.jsx","components/counter.jsx","components/counterList.jsx","components/crushingComponent.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["FirstComponent","state","count","imageUrl","tags","key","value","incrementCount","console","log","setState","style","backgroundColor","this","map","tag","src","alt","className","getCountClassName","formatCount","onClick","classes","Component","AnotherComponent","address","country","city","streetName","streetNumber","flatNumber","styles","fontSize","fontWeight","Fragment","CompComplexLevelThree","length","textAlign","borderStyle","borderWidth","borderCollapse","borderRadius","renderTags","FourthComponent","incrementCountArrowFunction","printLocationAndMessage","doIncrement","eventObj","callDoIncrement","id","bind","option","args","location","functionName","message","object","messageCollection","getDivStyle","getFormattedCount","getButtonIncrementClassName","href","ErrorBoundary","props","error","undefined","errorInfo","componentDidCatch","isError","getErrorInfoComp","getSpanClassName","getTextAreaStyle","toString","onChange","doNothing","componentStack","getChildrenComp","children","Error","e","eMsg","warn","margin","badgeM2","stringToAppendBy","width","height","float","display","verticalAlign","TryJSONstringify","objectToStringify","errorBoundaryComponent","stringify","ref","render","outputString","getPropsClassName","React","createRef","ResizableTextarea","rows","minRows","maxRows","Number","MAX_SAFE_INTEGER","textareaLineHeight","textareaRef","didRowsChangeTo1","prepareModelForChange","event","updateValueIfTextareaRef","current","onRender","ifTextareaRef","ifModelReady","ifComputedStyleTextareaRefCurrentLineHeight","ifTextareaLineHeight","window","getComputedStyle","lineHeight","updateTextareaLineHeight","getStylePropertyWithoutPx","updateMinHeightAndMaxHeight","didMinOrMaxHeightChange","minHeight","calculateMinHeightBasedOnMinRows","maxHeight","calculateMaxHeightBasedOnMaxRows","copyOfStyle","Object","assign","padding","getPaddingTopAndBottomSize","isModelReadyForTextareaHeightChange","changeTextareaHeight","newRowsValue","calculateNewNumberOfRows","Math","round","getContentHeight","scrollHeight","paddingTop","paddingBottom","propertyString","isString","parsedValue","parseInt","replace","isNaN","myVar","String","keys","propKey","index","placeholder","prevProps","prevState","snapshot","PureComponent","Counter","doCreateTryJSONstringify","resizeableTextAreaRef","inputRef","createProps","createTryJSONstringyfyComponentSection","createPropsWithoutChildrenSection","createWholePropsSection","getCounterParagraphStyle","createButtonToCreateTryJSONstringifyOrCreateTryJSONstringify","createTryJSONstringify","createButtonToCreateTryJSONstringify","createWarningMessage","getButtonClassName","setFlagToCreateTryJSONstringify","JSON","getPropsWithoutChildren","propsWithoutChildren","i","handleChangeTextareaSize","getJsonProps","type","handleSubmitMaxRows","copyOfInputRef","tryStringify","e1","eMsg1","e2","eMsg2","borderColor","resize","overflow","ComponentList","counters","getId","createCounters","counter","selected","CrushingComponent","jsError","crushCount","handleClick","getButtonStyle","App","logo","target","rel","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.52b68d8e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class FirstComponent extends Component {\n  state = {\n    count: 0,\n    imageUrl: \"https://picsum.photos/200\", // random image 200x200 px\n    tags: [\n      { key: \"0\", value: \"tag1\" },\n      { key: \"1\", value: \"tag2\" },\n      { key: \"2\", value: \"tag3\" }\n    ]\n  };\n  render() {\n    return (\n      <div style={{ backgroundColor: \"deepskyblue\" }}>\n        <h1>Counter</h1>\n        <p>\n          Counter's count field changes color and prints 'Zero' instead of '0'\n        </p>\n        <p>Also Counter uses className=\"...\" property</p>\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag.key}> {tag.value} </li>\n          ))}\n        </ul>\n        <img src={this.state.imageUrl} alt=\"\" /> <br />\n        <span className={this.getCountClassName()}>\n          count: {this.formatCount()}\n        </span>\n        <button onClick={this.incrementCount}>Increment</button>\n      </div>\n    );\n  }\n\n  incrementCount = () => {\n    console.log(\"#1 Incremented count. this.state.count = \" + this.state.count);\n    this.setState({ count: this.state.count + 1 });\n    console.log(\"#2 Incremented count. this.state.count = \" + this.state.count);\n  };\n\n  getCountClassName() {\n    let classes = \"badge m-2\";\n    classes += \" \";\n    classes += this.state.count === 0 ? \"badge-warning\" : \"badge-primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { count } = this.state;\n    return count === 0 ? <strong>Zero</strong> : count;\n  }\n}\n","import React, { Component } from \"react\";\nclass AnotherComponent extends Component {\n  state = {\n    count: 0,\n    address: {\n      country: \"unsetCountry\",\n      city: \"unsetCity\",\n      streetName: \"unsetStreetName\",\n      streetNumber: null,\n      flatNumber: null\n    }\n  };\n\n  styles = {\n    fontSize: 24,\n    fontWeight: \"bold\"\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2>Another Component</h2>\n        <p>AnotherComponent has static style with 2 ways to assigning style</p>\n        <span style={this.styles} className=\"badge badge-primary m-2\">\n          count: {this.formatCount()}\n        </span>\n        <button style={{ fontSize: 38 }} className=\"btn btn-secondary btn-sm\">\n          Another Increment\n        </button>\n        <br />\n      </React.Fragment>\n    );\n  }\n\n  formatCount() {\n    const { count } = this.state;\n    return count === 0 ? <strong>Zero</strong> : count;\n  }\n}\n\nexport default AnotherComponent;\n","import React, { Component } from \"react\";\n\nclass CompComplexLevelThree extends Component {\n  state = {\n    count: 0,\n    tags: [\n      // { key: \"0\", value: \"tag1\" },\n      // { key: \"1\", value: \"tag2\" },\n      // { key: \"2\", value: \"tag3\" }\n    ]\n  };\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n    else {\n      return (\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag.key}> {tag.value} </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            textAlign: \"center\",\n            borderStyle: \"solid\",\n            borderWidth: \"2px\",\n            borderCollapse: \"collapse\",\n            borderRadius: \"20px\",\n            backgroundColor: \"deepskyblue\"\n          }}\n        >\n          <h3> JavaScript property </h3>\n          <strong> 'Hello' (not empty) ==> Truthy </strong> <br />\n          <strong> '' (empty) ==> Falsy </strong> <br />\n          <strong> 1 (not zero) ==> Truthy </strong> <br />\n          <strong> 0 (zero) ==> Falsy </strong> <br />\n          <p>\n            true && \"Hello\": \"{true && \"Hello\"}\" <br />\n            false && \"Hello\": \"{false && \"Hello\"}\" <br />\n            true && \"\": \"{true && \"\"}\" <br />\n            false && \"\": \"{false && \"\"}\" <br />\n            true && 0: \"{true && 0}\" <br />\n            false && 0: \"{false && 0}\" <br />\n            true && 1245: \"{true && 1245}\" <br />\n            false && -1245: \"{false && -1245}\" <br />\n          </p>\n        </div>\n        <div\n          style={{\n            textAlign: \"center\",\n            borderStyle: \"solid\",\n            borderWidth: \"2px\",\n            borderCollapse: \"collapse\",\n            borderRadius: \"20px\",\n            backgroundColor: \"deepskyblue\"\n          }}\n        >\n          {this.state.tags.length === 0 && <p>Please create a new tag.</p>}\n          {this.renderTags()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CompComplexLevelThree;\n","import React, { Component } from \"react\";\n\nclass FourthComponent extends Component {\n  state = {\n    count: 0,\n    tags: [\n      // { key: \"0\", value: \"tag1\" },\n      // { key: \"1\", value: \"tag2\" },\n      // { key: \"2\", value: \"tag3\" }\n    ]\n  };\n\n  constructor() {\n    super();\n    console.log(\"Constructor >>> this = \", this); // undefined without bind()\n    this.incrementCount = this.incrementCount.bind(this);\n  }\n\n  messageCollection(option, args) {\n    console.log(\n      {\n        location: `${args[0]} >>> ${args[1]}: ${args[2]}`\n      }[option]\n    );\n  }\n\n  printLocationAndMessage(className, functionName, message, object) {\n    if (object || object !== 0 || object !== \"\")\n      console.log(`${className} >>> ${functionName}: ${message}`, object);\n    else console.log(`${className} >>> ${functionName}: ${message}`);\n  }\n\n  incrementCount() {\n    console.log(\"fourthComponent >>> incrementCount(): Increment clicked\");\n    console.log(\"fourthComponent >>> incrementCount(): this = \", this); // not undefined\n    console.log(\n      \"fourthComponent >>> incrementCount(): #1 this.state.count = \",\n      this.state.count\n    ); // error without bind()\n    this.setState({ count: this.state.count + 1 }); // error without bind()\n    console.log(\n      `fourthComponent >>> incrementCount(): #2 this.state.count = ${this.state.count}`\n    ); // error without bind()\n    this.messageCollection(\"location\", [\n      \"fourthComponent\",\n      \"incrementCount()\",\n      \"#3 this.state.count = \" + this.state.count\n    ]);\n  }\n\n  incrementCountArrowFunction = () => {\n    this.printLocationAndMessage(\n      \"fourthComponent\",\n      \"incrementCountArrowFunction()\",\n      \"Increment clicked!\"\n    );\n    this.printLocationAndMessage(\n      \"fourthComponent\",\n      \"incrementCountArrowFunction()\",\n      \"this = \",\n      this\n    );\n    // NOT undefined\n    // it's arrow function so it doesn't need bind\n    this.printLocationAndMessage(\n      \"fourthComponent\",\n      \"incrementCountArrowFunction()\",\n      \"#1 this.state.count = \",\n      this.state.count\n    );\n    // NOT undefined\n    // it's arrow function so it doesn't need bind\n    this.setState({ count: this.state.count + 1 });\n    // NOT undefined\n    // it's arrow function so it doesn't need bind\n    this.printLocationAndMessage(\n      \"fourthComponent\",\n      \"incrementCountArrowFunction()\",\n      \"#2 this.state.count = \",\n      this.state.count\n    );\n    // NO error\n    // it's arrow function so it doesn't need bind\n  };\n\n  doIncrement = eventObj => {\n    this.printLocationAndMessage(\n      \"fourthComponent\",\n      \"doIncrement()\",\n      \"eventObj = \",\n      eventObj\n    );\n  };\n\n  callDoIncrement = () => {\n    this.doIncrement({ id: 1 });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2>Fourth Component</h2>\n        <div style={this.getDivStyle()}>\n          <span className={this.getCountClassName()}>\n            {this.getFormattedCount()}\n          </span>\n          <button\n            onClick={this.incrementCount}\n            className={this.getButtonIncrementClassName()}\n          >\n            Increment - bind() this to function in constructor\n          </button>\n          <button\n            onClick={this.incrementCountArrowFunction}\n            className={this.getButtonIncrementClassName()}\n          >\n            Increment - arrow Function\n          </button>\n          <br />\n          <button\n            onClick={this.callDoIncrement}\n            className={this.getButtonIncrementClassName()}\n          >\n            Increment - arrow Function - passing argument - def function inside\n            a function\n          </button>\n          <button\n            onClick={() => {\n              this.doIncrement({ id: 1 });\n            }}\n            className={this.getButtonIncrementClassName()}\n          >\n            Increment - arrow Function - passing argument - inline function\n            inside a function\n          </button>\n          <br />\n          <span>\n            Last lesson done:\n            <a href={\"https://www.youtube.com/watch?v=Ke90Tje7VS0&t=4567\"}>\n              1:16:07\n            </a>\n          </span>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  getDivStyle() {\n    return {\n      textAlign: \"center\",\n      borderStyle: \"solid\",\n      borderWidth: \"2px\",\n      borderCollapse: \"collapse\",\n      borderRadius: \"20px\",\n      backgroundColor: \"deepskyblue\"\n    };\n  }\n\n  getCountClassName() {\n    let classes = \"badge m-2\";\n    classes += \" \";\n    classes += this.state.count === 0 ? \"badge-warning\" : \"badge-primary\";\n    return classes;\n  }\n\n  getButtonIncrementClassName() {\n    return \"btn btn-secondary btn-sm m-2\";\n  }\n\n  getFormattedCount() {\n    const { count } = this.state;\n    return count === 0 ? <strong>Zero</strong> : count;\n  }\n}\n\nexport default FourthComponent;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: undefined,\n    errorInfo: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  render() {\n    if (this.isError()) {\n      let renderedErrorPage = this.getErrorInfoComp();\n      return renderedErrorPage;\n    } else {\n      return this.getChildrenComp();\n    }\n  }\n\n  componentDidCatch = (error, errorInfo) => {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  };\n\n  isError = () => {\n    if (this.state.error) return true;\n    else return false;\n  };\n\n  getErrorInfoComp = () => {\n    return (\n      <div style={this.getDivStyle()}>\n        <span className={this.getSpanClassName()[2]}>Error: </span>\n        <textarea\n          style={this.getTextAreaStyle()}\n          className={this.getSpanClassName()[2]}\n          value={`${this.state.error.toString()}`}\n          onChange={this.doNothing}\n        />\n        <br />\n        <span className={this.getSpanClassName()[1]}>\n          ErrorInfo.ComponentStack:\n        </span>\n        <span className={this.getSpanClassName()[1]}>\n          {this.state.errorInfo.componentStack}\n        </span>\n      </div>\n    );\n  };\n\n  getChildrenComp = () => {\n    if (!this.props.children) {\n      throw new Error(\n        `ErrorBoundary class has no children. this.props.children = ${this.props.children}`\n      );\n    } else {\n      try {\n        let childrenComp = this.props.children;\n        return childrenComp;\n      } catch (e) {\n        let eMsg = `Caught error at ErrorBoundary class >>> getChildrenComp() >>> return.this.props.children.\\n\\rerror:${e}`;\n        console.warn(eMsg);\n        throw new Error(eMsg);\n      }\n    }\n  };\n\n  getDivStyle = () => {\n    return {\n      textAlign: \"center\",\n      borderStyle: \"hidden\",\n      borderRadius: \"20px\",\n      margin: \"2px\",\n      backgroundColor: \"Crimson\"\n    };\n  };\n\n  getSpanClassName = () => {\n    return [\n      this.badgeM2(\" badge-info\"),\n      this.badgeM2(\" badge-warning\"),\n      this.badgeM2(\" badge-danger\")\n    ];\n  };\n\n  badgeM2 = stringToAppendBy => `badge m-2${stringToAppendBy}`;\n\n  getTextAreaStyle = () => {\n    return {\n      width: \"calc(100% - 250px)\",\n      height: \"60px\",\n      float: \"center\",\n      display: \"inline-block\",\n      verticalAlign: \"middle\"\n    };\n  };\n\n  doNothing = () => {};\n}\n\nexport default ErrorBoundary;\n","import Stringify from \"react-stringify\";\nimport React, { Component } from \"react\";\nimport ErrorBoundary from \"./errorBoundary\";\n\nclass TryJSONstringify extends Component {\n  state = {\n    objectToStringify: undefined,\n    errorBoundaryComponent: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state.objectToStringify = this.props.object;\n    this.state.errorBoundaryComponent = React.createRef();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <span className={this.getPropsClassName()[1]}>\n          {\"this.stringify(): \"}\n        </span>{\" \"}\n        {this.stringify()} <br />\n      </React.Fragment>\n    );\n  }\n\n  stringify = () => {\n    if (!this.state.objectToStringify)\n      throw new Error(\"!this.state.objectToStringify\");\n    let errorBoundStringifyComponent = (\n      <ErrorBoundary ref={this.state.errorBoundaryComponent}>\n        <Stringify\n          value={this.state.objectToStringify}\n          render={outputString => {\n            return (\n              <span className={this.getPropsClassName()[2]}>\n                {outputString}\n              </span>\n            );\n          }}\n        />\n      </ErrorBoundary>\n    );\n    return errorBoundStringifyComponent;\n  };\n\n  getPropsClassName() {\n    return [\n      this.badgeM2(\" badge-warning\"),\n      this.badgeM2(\" badge-primary\"),\n      this.badgeM2(\" badge-secondary\")\n    ];\n  }\n\n  badgeM2 = stringToAppendBy => `badge m-2${stringToAppendBy}`;\n}\n\nexport default TryJSONstringify;\n","import React from \"react\";\n\nclass ResizableTextarea extends React.PureComponent {\n  state = {\n    value: \"\",\n    rows: 1,\n    minRows: 1,\n    maxRows: Number.MAX_SAFE_INTEGER,\n    textareaLineHeight: undefined,\n    textareaRef: undefined,\n    didRowsChangeTo1: false\n  };\n\n  constructor(props) {\n    super(props);\n    if (this.props) {\n      Object.keys(this.props).map((propKey, index) => {\n        return (this.state[propKey] = this.props[propKey]);\n      });\n    }\n    this.state.textareaRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <textarea\n        rows={this.state.rows}\n        value={this.state.value}\n        placeholder={\"Enter your text here...\"}\n        className={\n          this.state[\"className\"] ? this.state[\"className\"] : \"textarea\"\n        }\n        style={this.state[\"style\"] ? this.state[\"style\"] : {}}\n        onChange={this.prepareModelForChange}\n        ref={this.state.textareaRef}\n      />\n    );\n  }\n\n  prepareModelForChange = event => {\n    this.updateValueIfTextareaRef();\n    this.setState(({ rows: rowsValue }) => ({ rows: 1 }));\n    if (this.state.didRowsChangeTo1 === false)\n      this.setState(({ didRowsChangeTo1: didRowsChangeTo1Value }) => ({\n        didRowsChangeTo1: true\n      }));\n  };\n\n  updateValueIfTextareaRef = () => {\n    if (this.state.textareaRef) {\n      this.setState({ value: this.state.textareaRef.current.value });\n    }\n  };\n\n  componentDidMount() {\n    this.onRender();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.onRender();\n  }\n\n  onRender = () => {\n    this.ifTextareaRef();\n    this.ifModelReady();\n  };\n\n  ifTextareaRef = () => {\n    if (this.state.textareaRef) {\n      this.ifComputedStyleTextareaRefCurrentLineHeight();\n      this.ifTextareaLineHeight();\n    } else {\n      throw new Error(\n        `this.state.textareaRef = ${this.state.textareaRef}\\n\\rThis should NOT happen.`\n      );\n    }\n  };\n\n  ifComputedStyleTextareaRefCurrentLineHeight = () => {\n    if (window.getComputedStyle(this.state.textareaRef.current).lineHeight) {\n      this.updateTextareaLineHeight();\n    } else {\n      throw new Error(\n        `window.getComputedStyle(this.state.textareaRef.current).lineHeight = ${\n          window.getComputedStyle(this.state.textareaRef.current).lineHeight\n        }\\n\\rThis should NOT happen.`\n      );\n    }\n  };\n\n  updateTextareaLineHeight = () => {\n    this.setState(({ textareaLineHeight: textareaLineHeightValue }) => ({\n      textareaLineHeight: this.getStylePropertyWithoutPx(\n        window.getComputedStyle(this.state.textareaRef.current).lineHeight\n      )\n    }));\n  };\n\n  ifTextareaLineHeight = () => {\n    if (this.state.textareaLineHeight) {\n      this.updateMinHeightAndMaxHeight();\n    }\n  };\n\n  didMinOrMaxHeightChange = () => {\n    return (\n      this.state.style.minHeight !== this.calculateMinHeightBasedOnMinRows() ||\n      this.state.style.maxHeight !== this.calculateMaxHeightBasedOnMaxRows()\n    );\n  };\n\n  updateMinHeightAndMaxHeight = () => {\n    if (this.didMinOrMaxHeightChange()) {\n      let copyOfStyle = Object.assign({}, this.state.style);\n      copyOfStyle.minHeight = this.calculateMinHeightBasedOnMinRows();\n      copyOfStyle.maxHeight = this.calculateMaxHeightBasedOnMaxRows();\n      this.setState(({ style: stateValue }) => ({\n        style: copyOfStyle\n      }));\n    }\n  };\n\n  calculateMinHeightBasedOnMinRows = () => {\n    let padding = this.getPaddingTopAndBottomSize();\n    return (\n      this.state.minRows *\n        this.getStylePropertyWithoutPx(this.state.textareaLineHeight) +\n      padding[\"paddingTop\"] +\n      padding[\"paddingBottom\"] +\n      \"px\"\n    );\n  };\n\n  calculateMaxHeightBasedOnMaxRows = () => {\n    let padding = this.getPaddingTopAndBottomSize();\n    return (\n      this.state.maxRows *\n        this.getStylePropertyWithoutPx(this.state.textareaLineHeight) +\n      padding[\"paddingTop\"] +\n      padding[\"paddingBottom\"] +\n      \"px\"\n    );\n  };\n\n  isModelReadyForTextareaHeightChange = () => {\n    if (\n      this.state.didRowsChangeTo1 &&\n      this.state.rows === 1 &&\n      !this.state.textareaLineHeight\n    ) {\n      throw new Error(\n        `this.state.didRowsChangeTo1 = ${this.state.didRowsChangeTo1}\\n\\r` +\n          `this.state.rows = ${this.state.rows}\\n\\r` +\n          `this.state.textareaRef = ${this.state.textareaRef}\\n\\r` +\n          `This should NOT happen.`\n      );\n    }\n    return (\n      this.state.didRowsChangeTo1 &&\n      this.state.rows === 1 &&\n      this.state.textareaLineHeight\n    );\n  };\n\n  ifModelReady = () => {\n    if (this.isModelReadyForTextareaHeightChange()) {\n      this.changeTextareaHeight();\n    }\n  };\n\n  changeTextareaHeight = () => {\n    let newRowsValue = this.calculateNewNumberOfRows();\n    if (newRowsValue > this.state.maxRows) {\n      newRowsValue = this.state.maxRows;\n    }\n    this.setState(({ rows: rowsValue }) => ({ rows: newRowsValue }));\n    this.setState(({ didRowsChangeTo1: didRowsChangeTo1Value }) => ({\n      didRowsChangeTo1: false\n    }));\n  };\n\n  calculateNewNumberOfRows = () => {\n    let newNumberOfRows = Math.round(\n      this.getContentHeight() / this.state.textareaLineHeight\n    );\n    return newNumberOfRows;\n  };\n\n  getContentHeight = () => {\n    if (this.state.textareaRef) {\n      let padding = this.getPaddingTopAndBottomSize();\n      let contentHeight =\n        this.state.textareaRef.current.scrollHeight -\n        (padding[\"paddingTop\"] + padding[\"paddingBottom\"]);\n      return contentHeight;\n    } else {\n      throw new Error(\n        `this.state.textareaRef = ${this.state.textareaRef} (falsy).\\n\\rThis should NOT happen.`\n      );\n    }\n  };\n\n  getPaddingTopAndBottomSize = () => {\n    let paddingTopValue = this.getStylePropertyWithoutPx(\n      window.getComputedStyle(this.state.textareaRef.current).paddingTop\n    );\n    let paddingBottomValue = this.getStylePropertyWithoutPx(\n      window.getComputedStyle(this.state.textareaRef.current).paddingBottom\n    );\n    return { paddingTop: paddingTopValue, paddingBottom: paddingBottomValue };\n  };\n\n  getStylePropertyWithoutPx = propertyString => {\n    if (this.isString(propertyString)) {\n      let parsedValue = parseInt(propertyString.replace(/px/g, \"\"));\n      if (isNaN(parsedValue)) {\n        throw new Error(\n          `Could NOT parse to int property = \"${propertyString}\"`\n        );\n      } else {\n        return parsedValue;\n      }\n    } else return propertyString;\n  };\n\n  isString = myVar => {\n    if (typeof myVar === \"string\" || myVar instanceof String) return true;\n    else return false;\n  };\n}\n\nexport default ResizableTextarea;\n","import React, { Component } from \"react\";\nimport TryJSONstringify from \"./tryJSONstringify\";\nimport { stringify } from \"flatted/esm\";\n// import { parse } from \"flatted/esm\";\nimport ResizableTextarea from \"./resizableTextarea\";\n\nclass Counter extends Component {\n  state = {\n    count: this.props.count ? this.props.count : 0,\n    doCreateTryJSONstringify: false,\n    resizeableTextAreaRef: undefined,\n    maxRows: 20,\n    inputRef: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state.resizeableTextAreaRef = React.createRef();\n    this.state.inputRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div style={this.getDivStyle()}>\n          <p style={this.getCounterParagraphStyle()}>\n            <span className={this.getCountClassName()}>\n              count: {this.formatCount()}\n            </span>\n            <button\n              className={this.getButtonClassName()}\n              onClick={this.incrementCount}\n            >\n              Increment\n            </button>\n          </p>\n          {this.createProps()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  incrementCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  getCountClassName() {\n    let classes = \"badge m-2\";\n    classes += \" \";\n    classes += this.state.count === 0 ? \"badge-warning\" : \"badge-primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { count } = this.state;\n    return count === 0 ? <strong>Zero</strong> : count;\n  }\n\n  createProps = () => {\n    return (\n      <React.Fragment>\n        {this.createTryJSONstringyfyComponentSection()}\n        {this.createPropsWithoutChildrenSection()}\n        {this.createWholePropsSection()}\n      </React.Fragment>\n    );\n  };\n\n  createTryJSONstringyfyComponentSection = () => {\n    return (\n      <div style={this.getCounterParagraphStyle()}>\n        <span className={this.getPropsClassName()[0]}>{\"Props:\"} </span>\n        {this.createButtonToCreateTryJSONstringifyOrCreateTryJSONstringify()}\n      </div>\n    );\n  };\n\n  createButtonToCreateTryJSONstringifyOrCreateTryJSONstringify = () => {\n    if (this.state.doCreateTryJSONstringify)\n      return this.createTryJSONstringify();\n    else return this.createButtonToCreateTryJSONstringify();\n  };\n\n  createTryJSONstringify = () => {\n    return (\n      <React.Fragment>\n        <span className={this.getPropsClassName()[1]}>\n          {\"<TryJSONstringify object={this.props} />:\"}\n        </span>\n        <TryJSONstringify object={this.props} />\n        <br />\n      </React.Fragment>\n    );\n  };\n\n  createButtonToCreateTryJSONstringify = () => {\n    return (\n      <React.Fragment>\n        {this.props.children ? this.createWarningMessage() : ``}\n        <button\n          className={this.getButtonClassName()}\n          onClick={this.setFlagToCreateTryJSONstringify}\n        >\n          Create TryJSONstringify Component\n        </button>\n        <br />\n      </React.Fragment>\n    );\n  };\n\n  createWarningMessage = () => {\n    return (\n      <React.Fragment>\n        <br />\n        <span className={this.getPropsClassName()[0]}>[WARNING]</span>\n        <span className={this.getPropsClassName()[0]}>\n          THIS COUNTER HAS CHILDREN - pushing this button will crash component\n          Stringify\n        </span>\n        <br />\n      </React.Fragment>\n    );\n  };\n\n  setFlagToCreateTryJSONstringify = () => {\n    this.setState(\n      ({ doCreateTryJSONstringify: doCreateTryJSONstringifyValue }) => ({\n        doCreateTryJSONstringify: true\n      })\n    );\n  };\n\n  createPropsWithoutChildrenSection = () => {\n    return (\n      <div style={this.getCounterParagraphStyle()}>\n        <span className={this.getPropsClassName()[0]}>\n          {\"Props without children:\"}\n        </span>\n        <span className={this.getPropsClassName()[1]}>\n          {\"JSON.stringify(this.getPropsWithoutChildren())\"}\n        </span>\n        <span className={this.getPropsClassName()[2]}>\n          {JSON.stringify(this.getPropsWithoutChildren())}\n        </span>\n      </div>\n    );\n  };\n\n  getPropsWithoutChildren = () => {\n    if (this.props) {\n      let propsWithoutChildren = {};\n      Object.keys(this.props).map((propKey, i) => {\n        if (propKey !== \"children\") {\n          propsWithoutChildren[propKey] = this.props[propKey];\n        }\n        return propsWithoutChildren;\n      });\n      return propsWithoutChildren;\n    } else console.warn(\"!this.props\");\n    return;\n  };\n\n  handleChangeTextareaSize = event => {\n    if (\n      this.state.resizeableTextAreaRef &&\n      this.state.resizeableTextAreaRef.current\n    ) {\n      this.state.resizeableTextAreaRef.current.setState(\n        ({ maxRows: maxRowsValue }) => ({ maxRows: this.state.maxRows })\n      );\n      this.state.resizeableTextAreaRef.current.prepareModelForChange(event);\n    }\n  };\n\n  createWholePropsSection = () => {\n    return (\n      <div style={this.getCounterParagraphStyle()}>\n        <span className={this.getPropsClassName()[0]}> {\"Props:\"} </span>\n        <span className={this.getPropsClassName()[1]}>{\"getJsonProps()\"}</span>\n        <ResizableTextarea\n          ref={this.state.resizeableTextAreaRef}\n          style={this.getTextAreaStyle()}\n          className={this.getPropsClassName()}\n          value={`${this.getJsonProps()}`}\n          rows={5}\n          maxRows={this.state.maxRows}\n        />\n        <br />\n        <button\n          className={this.getButtonClassName()}\n          onClick={this.handleChangeTextareaSize}\n        >\n          {`Fit text area size to its value (Max number of rows = ${this.state.maxRows})`}\n        </button>\n        <br />\n        <input\n          style={{\n            padding: \"5px 5px 5px 5px\",\n            margin: \"5px 5px 5px 5px\",\n            float: \"center\",\n            display: \"inline-block\",\n            verticalAlign: \"middle\"\n          }}\n          type={\"text\"}\n          placeholder={\"Your max number of rows\"}\n          ref={this.state.inputRef}\n        />\n        <button\n          className={this.getButtonClassName()}\n          onClick={this.handleSubmitMaxRows}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  };\n\n  handleSubmitMaxRows = event => {\n    if (this.state.inputRef) {\n      if (isNaN(parseInt(this.state.inputRef.current.value))) {\n        let copyOfInputRef = Object.assign({}, this.state.inputRef);\n        copyOfInputRef.current.value = \"This must be an integer.\";\n        this.setState(({ inputRef: inputRefValue }) => ({\n          inputRef: copyOfInputRef\n        }));\n      } else {\n        this.setState(({ maxRows: maxRowsValue }) => ({\n          maxRows: parseInt(this.state.inputRef.current.value)\n        }));\n      }\n    }\n  };\n\n  getJsonProps = () => {\n    return Object.keys(this.props).map(\n      (propKey, i) =>\n        ` ${i}. { ${propKey}: ${this.tryStringify(this.props[propKey])} }`\n    );\n  };\n\n  tryStringify = object => {\n    try {\n      let stringifiedObject = JSON.stringify(object, null, \"    \");\n      return stringifiedObject;\n    } catch (e1) {\n      let eMsg1 = `Could not JSON.stringify(object).\\n\\re1: ${e1}`;\n      console.warn(eMsg1);\n      try {\n        let stringifiedObject = stringify(object, null, \"    \");\n        return stringifiedObject;\n      } catch (e2) {\n        let eMsg2 = `Could not flatted.stringify(object).\\n\\re2: ${e2}`;\n        console.warn(eMsg2);\n        return `${eMsg1}\\n\\r${eMsg2}`;\n      }\n    }\n  };\n\n  getPropsClassName() {\n    return [\n      this.badgeM2(\" badge-warning\"),\n      this.badgeM2(\" badge-primary\"),\n      this.badgeM2(\" badge-secondary\")\n    ];\n  }\n\n  badgeM2 = stringToAppendBy => `badge m-2${stringToAppendBy}`;\n\n  getDivStyle = () => {\n    return {\n      padding: \"5px\",\n      textAlign: \"center\",\n      borderStyle: \"hidden\",\n      borderRadius: \"20px\",\n      borderCollapse: \"collapse\",\n      margin: \"5px\",\n      backgroundColor: \"royalBlue\"\n    };\n  };\n\n  getCounterParagraphStyle = () => {\n    return {\n      textAlign: \"center\",\n      borderStyle: \"solid\",\n      borderRadius: \"20px\",\n      borderCollapse: \"collapse\",\n      margin: \"5px\",\n      backgroundColor: \"deepSkyBlue\",\n      borderColor: \"lightSkyBlue\"\n    };\n  };\n\n  getButtonClassName = () => {\n    return \"btn btn-light\";\n  };\n\n  getTextAreaStyle = () => {\n    return {\n      resize: \"vertical\",\n      minHeight: \"12px\",\n      maxHeight: \"200px\",\n      height: \"auto\",\n      width: \"calc(100% - 250px)\",\n      float: \"center\",\n      display: \"inline-block\",\n      verticalAlign: \"middle\",\n      overflow: \"hidden\"\n    };\n  };\n\n  doNothing = () => {};\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass ComponentList extends Component {\n  state = {\n    id: \"ComponentList\",\n    counters: [\n      { id: 1, count: 5 },\n      { id: 2, count: 4 },\n      { id: 3, count: 3 },\n      { id: 4, count: 2 },\n      { id: 5, count: 1 },\n      { id: 6, count: 0 }\n    ]\n  };\n\n  getId = () => {\n    return this.state.id;\n  };\n\n  getDivStyle = () => {\n    return {\n      textAlign: \"center\",\n      borderStyle: \"solid\",\n      borderWidth: \"2px\",\n      borderCollapse: \"collapse\",\n      borderRadius: \"20px\",\n      backgroundColor: \"dodgerBlue\"\n    };\n  };\n\n  render() {\n    return (\n      <div id={this.getId()} style={this.getDivStyle()}>\n        {this.createCounters()}\n        <Counter count={10} selected={false} id={10}>\n          <h1>This counter is statically added to counter list</h1>\n          <h2>It isn't self-closed</h2>\n          <h3>It has something between opening and closing tag of element</h3>\n          <h4>This should modified this.props.children</h4>\n        </Counter>\n      </div>\n    );\n  }\n\n  createCounters = () => {\n    return this.state.counters.map(counter => (\n      <Counter\n        key={counter.id}\n        count={counter.count}\n        selected={true}\n        id={counter.id}\n      />\n    ));\n  };\n}\nexport default ComponentList;\n","import React, { Component } from \"react\";\n\nclass CrushingComponent extends Component {\n  state = {\n    count: 0,\n    jsError: undefined\n  };\n\n  crushCount = () => {\n    return 3;\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  handleClick = event => {\n    try {\n      this.setState(({ count }) => ({ count: count + 1 }));\n    } catch (e) {\n      for (let i = 0; i < 20; i++) {\n        console.warn(\n          `Caught error at CrushingComponent class >>> handleClick() >>> this.setState(...).\\n\\rerror:${e}`\n        );\n        this.setState(({ jsError: jsErrorValue }) => ({ jsError: e }));\n      }\n    }\n  };\n\n  getButtonClassName = () => {\n    return \"btn btn-danger\";\n  };\n\n  getButtonStyle = () => {\n    return {\n      display: \"block\",\n      margin: \"0 auto\"\n    };\n  };\n\n  render() {\n    if (this.state.jsError) return <h1>Something went wrong.</h1>;\n    else {\n      if (this.state.count >= this.crushCount()) {\n        throw new Error(\n          `Button crushed at this.state.count = ${this.state.count}`\n        );\n      }\n      return (\n        <React.Fragment>\n          <button\n            onClick={this.handleClick}\n            className={this.getButtonClassName()}\n            style={this.getButtonStyle()}\n          >{`This button crushes at count = ${this.crushCount()}. Current count = ${\n            this.state.count\n          }`}</button>\n          <br />\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default CrushingComponent;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FirstComponent from \"./components/firstComponent\";\nimport AnotherComponent from \"./components/anotherComponent\";\nimport CompComplexLevelThree from \"./components/compComplexLevelThree\";\nimport FourthComponent from \"./components/fourthComponent\";\nimport CounterList from \"./components/counterList\";\nimport ErrorBoundary from \"./components/errorBoundary\";\nimport CrushingComponent from \"./components/crushingComponent\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        This is inside div className = \"App\" \\/\\/\\/\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <FirstComponent />\n        This is inside div className = \"App\" /\\/\\/\\\n      </div>\n      This is ouside of div className = \"App\" \\/\\/\\/ <br />\n      It's inside React.Fragment \\/\\/\\/\n      <AnotherComponent />\n      <CompComplexLevelThree />\n      <FourthComponent />\n      <CounterList />\n      <ErrorBoundary>\n        <CrushingComponent />\n      </ErrorBoundary>\n      This is ouside of div className = \"App\" /\\/\\/\\ <br />\n      It's inside React.Fragment /\\/\\/\\\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}